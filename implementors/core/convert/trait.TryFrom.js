(function() {var implementors = {};
implementors["libsignal_protocol"] = [{"text":"impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.61.0/core/convert/trait.TryFrom.html\" title=\"trait core::convert::TryFrom\">TryFrom</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.61.0/std/primitive.slice.html\">&amp;'_ [</a><a class=\"primitive\" href=\"https://doc.rust-lang.org/1.61.0/std/primitive.u8.html\">u8</a><a class=\"primitive\" href=\"https://doc.rust-lang.org/1.61.0/std/primitive.slice.html\">]</a>&gt; for <a class=\"struct\" href=\"libsignal_protocol/struct.PublicKey.html\" title=\"struct libsignal_protocol::PublicKey\">PublicKey</a>","synthetic":false,"types":["libsignal_protocol::curve::PublicKey"]},{"text":"impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.61.0/core/convert/trait.TryFrom.html\" title=\"trait core::convert::TryFrom\">TryFrom</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.61.0/std/primitive.slice.html\">&amp;'_ [</a><a class=\"primitive\" href=\"https://doc.rust-lang.org/1.61.0/std/primitive.u8.html\">u8</a><a class=\"primitive\" href=\"https://doc.rust-lang.org/1.61.0/std/primitive.slice.html\">]</a>&gt; for <a class=\"struct\" href=\"libsignal_protocol/struct.PrivateKey.html\" title=\"struct libsignal_protocol::PrivateKey\">PrivateKey</a>","synthetic":false,"types":["libsignal_protocol::curve::PrivateKey"]},{"text":"impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.61.0/core/convert/trait.TryFrom.html\" title=\"trait core::convert::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"libsignal_protocol/struct.PrivateKey.html\" title=\"struct libsignal_protocol::PrivateKey\">PrivateKey</a>&gt; for <a class=\"struct\" href=\"libsignal_protocol/struct.KeyPair.html\" title=\"struct libsignal_protocol::KeyPair\">KeyPair</a>","synthetic":false,"types":["libsignal_protocol::curve::KeyPair"]},{"text":"impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.61.0/core/convert/trait.TryFrom.html\" title=\"trait core::convert::TryFrom\">TryFrom</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.61.0/std/primitive.slice.html\">&amp;'_ [</a><a class=\"primitive\" href=\"https://doc.rust-lang.org/1.61.0/std/primitive.u8.html\">u8</a><a class=\"primitive\" href=\"https://doc.rust-lang.org/1.61.0/std/primitive.slice.html\">]</a>&gt; for <a class=\"struct\" href=\"libsignal_protocol/struct.IdentityKey.html\" title=\"struct libsignal_protocol::IdentityKey\">IdentityKey</a>","synthetic":false,"types":["libsignal_protocol::identity_key::IdentityKey"]},{"text":"impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.61.0/core/convert/trait.TryFrom.html\" title=\"trait core::convert::TryFrom\">TryFrom</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.61.0/std/primitive.slice.html\">&amp;'_ [</a><a class=\"primitive\" href=\"https://doc.rust-lang.org/1.61.0/std/primitive.u8.html\">u8</a><a class=\"primitive\" href=\"https://doc.rust-lang.org/1.61.0/std/primitive.slice.html\">]</a>&gt; for <a class=\"struct\" href=\"libsignal_protocol/struct.IdentityKeyPair.html\" title=\"struct libsignal_protocol::IdentityKeyPair\">IdentityKeyPair</a>","synthetic":false,"types":["libsignal_protocol::identity_key::IdentityKeyPair"]},{"text":"impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.61.0/core/convert/trait.TryFrom.html\" title=\"trait core::convert::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"libsignal_protocol/struct.PrivateKey.html\" title=\"struct libsignal_protocol::PrivateKey\">PrivateKey</a>&gt; for <a class=\"struct\" href=\"libsignal_protocol/struct.IdentityKeyPair.html\" title=\"struct libsignal_protocol::IdentityKeyPair\">IdentityKeyPair</a>","synthetic":false,"types":["libsignal_protocol::identity_key::IdentityKeyPair"]},{"text":"impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.61.0/core/convert/trait.TryFrom.html\" title=\"trait core::convert::TryFrom\">TryFrom</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.61.0/std/primitive.u8.html\">u8</a>&gt; for <a class=\"enum\" href=\"libsignal_protocol/enum.CiphertextMessageType.html\" title=\"enum libsignal_protocol::CiphertextMessageType\">CiphertextMessageType</a>","synthetic":false,"types":["libsignal_protocol::protocol::CiphertextMessageType"]},{"text":"impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.61.0/core/convert/trait.TryFrom.html\" title=\"trait core::convert::TryFrom\">TryFrom</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.61.0/std/primitive.slice.html\">&amp;'_ [</a><a class=\"primitive\" href=\"https://doc.rust-lang.org/1.61.0/std/primitive.u8.html\">u8</a><a class=\"primitive\" href=\"https://doc.rust-lang.org/1.61.0/std/primitive.slice.html\">]</a>&gt; for <a class=\"struct\" href=\"libsignal_protocol/struct.SignalMessage.html\" title=\"struct libsignal_protocol::SignalMessage\">SignalMessage</a>","synthetic":false,"types":["libsignal_protocol::protocol::SignalMessage"]},{"text":"impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.61.0/core/convert/trait.TryFrom.html\" title=\"trait core::convert::TryFrom\">TryFrom</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.61.0/std/primitive.slice.html\">&amp;'_ [</a><a class=\"primitive\" href=\"https://doc.rust-lang.org/1.61.0/std/primitive.u8.html\">u8</a><a class=\"primitive\" href=\"https://doc.rust-lang.org/1.61.0/std/primitive.slice.html\">]</a>&gt; for <a class=\"struct\" href=\"libsignal_protocol/struct.PreKeySignalMessage.html\" title=\"struct libsignal_protocol::PreKeySignalMessage\">PreKeySignalMessage</a>","synthetic":false,"types":["libsignal_protocol::protocol::PreKeySignalMessage"]},{"text":"impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.61.0/core/convert/trait.TryFrom.html\" title=\"trait core::convert::TryFrom\">TryFrom</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.61.0/std/primitive.slice.html\">&amp;'_ [</a><a class=\"primitive\" href=\"https://doc.rust-lang.org/1.61.0/std/primitive.u8.html\">u8</a><a class=\"primitive\" href=\"https://doc.rust-lang.org/1.61.0/std/primitive.slice.html\">]</a>&gt; for <a class=\"struct\" href=\"libsignal_protocol/struct.SenderKeyMessage.html\" title=\"struct libsignal_protocol::SenderKeyMessage\">SenderKeyMessage</a>","synthetic":false,"types":["libsignal_protocol::protocol::SenderKeyMessage"]},{"text":"impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.61.0/core/convert/trait.TryFrom.html\" title=\"trait core::convert::TryFrom\">TryFrom</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.61.0/std/primitive.slice.html\">&amp;'_ [</a><a class=\"primitive\" href=\"https://doc.rust-lang.org/1.61.0/std/primitive.u8.html\">u8</a><a class=\"primitive\" href=\"https://doc.rust-lang.org/1.61.0/std/primitive.slice.html\">]</a>&gt; for <a class=\"struct\" href=\"libsignal_protocol/struct.SenderKeyDistributionMessage.html\" title=\"struct libsignal_protocol::SenderKeyDistributionMessage\">SenderKeyDistributionMessage</a>","synthetic":false,"types":["libsignal_protocol::protocol::SenderKeyDistributionMessage"]},{"text":"impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.61.0/core/convert/trait.TryFrom.html\" title=\"trait core::convert::TryFrom\">TryFrom</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.61.0/std/primitive.slice.html\">&amp;'_ [</a><a class=\"primitive\" href=\"https://doc.rust-lang.org/1.61.0/std/primitive.u8.html\">u8</a><a class=\"primitive\" href=\"https://doc.rust-lang.org/1.61.0/std/primitive.slice.html\">]</a>&gt; for <a class=\"struct\" href=\"libsignal_protocol/struct.PlaintextContent.html\" title=\"struct libsignal_protocol::PlaintextContent\">PlaintextContent</a>","synthetic":false,"types":["libsignal_protocol::protocol::PlaintextContent"]},{"text":"impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.61.0/core/convert/trait.TryFrom.html\" title=\"trait core::convert::TryFrom\">TryFrom</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.61.0/std/primitive.slice.html\">&amp;'_ [</a><a class=\"primitive\" href=\"https://doc.rust-lang.org/1.61.0/std/primitive.u8.html\">u8</a><a class=\"primitive\" href=\"https://doc.rust-lang.org/1.61.0/std/primitive.slice.html\">]</a>&gt; for <a class=\"struct\" href=\"libsignal_protocol/struct.DecryptionErrorMessage.html\" title=\"struct libsignal_protocol::DecryptionErrorMessage\">DecryptionErrorMessage</a>","synthetic":false,"types":["libsignal_protocol::protocol::DecryptionErrorMessage"]}];
implementors["libsignal_service"] = [{"text":"impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.61.0/core/convert/trait.TryFrom.html\" title=\"trait core::convert::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"libsignal_service/envelope/struct.EnvelopeEntity.html\" title=\"struct libsignal_service::envelope::EnvelopeEntity\">EnvelopeEntity</a>&gt; for <a class=\"struct\" href=\"libsignal_service/proto/struct.Envelope.html\" title=\"struct libsignal_service::proto::Envelope\">Envelope</a>","synthetic":false,"types":["libsignal_service::proto::Envelope"]},{"text":"impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.61.0/core/convert/trait.TryFrom.html\" title=\"trait core::convert::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"libsignal_service/prelude/protocol/struct.PreKeyRecord.html\" title=\"struct libsignal_service::prelude::protocol::PreKeyRecord\">PreKeyRecord</a>&gt; for <a class=\"struct\" href=\"libsignal_service/pre_keys/struct.PreKeyEntity.html\" title=\"struct libsignal_service::pre_keys::PreKeyEntity\">PreKeyEntity</a>","synthetic":false,"types":["libsignal_service::pre_keys::PreKeyEntity"]},{"text":"impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.61.0/core/convert/trait.TryFrom.html\" title=\"trait core::convert::TryFrom\">TryFrom</a>&lt;<a class=\"struct\" href=\"libsignal_service/prelude/protocol/struct.SignedPreKeyRecord.html\" title=\"struct libsignal_service::prelude::protocol::SignedPreKeyRecord\">SignedPreKeyRecord</a>&gt; for <a class=\"struct\" href=\"libsignal_service/pre_keys/struct.SignedPreKey.html\" title=\"struct libsignal_service::pre_keys::SignedPreKey\">SignedPreKey</a>","synthetic":false,"types":["libsignal_service::pre_keys::SignedPreKey"]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()